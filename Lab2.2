/*
 * 	startup.c
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */
}
#define SIMULATOR

#define SysTick				0xE000E010
#define STK_CTRL			((volatile unsigned int *)		(SysTick))
#define STK_LOAD			((volatile unsigned int *)		(SysTick+0x04))
#define STK_VAL				((volatile unsigned int *)		(SysTick+0x08))


#define GPIO_E				0x40021000
#define GPIO_E_MODER		((volatile unsigned int *)		(GPIO_E))

#define GPIO_E_OTYPER		((volatile unsigned short *)	(GPIO_E+0x04)) // OUTPUT
#define GPIO_E_PUPDR		((volatile unsigned short *) 	(GPIO_E+0x0E))
#define GPIO_E_OSPEEDR		((volatile unsigned int *)		(GPIO_E+0x08)) // OUTPUT SPEED REGISTER

#define BARGRAPH			((volatile unsigned char *)		(GPIO_E+0x14)) // char?? or short??


void app_init(void)
{	
	* GPIO_E_MODER = 0x00005555;
	* GPIO_E_OTYPER = 0x00000000;
	//* GPIO_E_OSPEEDR = 0x00000000; // OKLART OM DENNA BEHÃ–VS(?)

}

void delay_250ns(void){
	* STK_CTRL = 0;
	* STK_LOAD = (164/4) - 1;
	* STK_VAL = 0;
	* STK_CTRL = 5;
	while((* STK_CTRL & 0x10000) == 0);
	* STK_CTRL = 0;	
}

void delay_mikro(int us){
	#ifdef SIMULATOR
		us = us/4000;
		us++;
	#endif
	
		delay_250ns();
		delay_250ns();
		delay_250ns();
		delay_250ns();
	
}

void delay_mili(int ms){
	#ifdef SIMULATOR
		ms = ms/4000;
		ms++;
	#endif
	
	
		delay_mikro(1000);
		
}

void main(void)
{
	app_init();
	while( 1 )
	{
		*BARGRAPH = 0;
		delay_mili(500);
		*BARGRAPH = 0xFF;
		delay_mili(500);		
	}
}
