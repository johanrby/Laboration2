/*
 * 	startup.c
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */
}

#define SIMULATOR			/*this line if testing in simulator*/

#define SysTick				0xE000E010
#define STK_CTRL			((volatile unsigned int *)		(SysTick))
#define STK_LOAD			((volatile unsigned int *)		(SysTick+0x04))
#define STK_VAL				((volatile unsigned int *)		(SysTick+0x08))

#define GPIO_E				0x40021000
#define GPIO_E_MODER		((volatile unsigned int *)		(GPIO_E))
#define GPIO_E_OTYPER		((volatile unsigned short *)	(GPIO_E+0x05))
#define GPIO_E_PUPDR		((volatile unsigned short *) 	(GPIO_E+0x0E))
#define GPIO_E_OSPEEDR		((volatile unsigned int *)		(GPIO_E+0x08))
#define GPIO_E_ODR_LOW 		((volatile unsigned char *)	 	(GPIO_E+0x14))	
#define GPIO_E_ODR_HIGH 	((volatile unsigned char *)		(GPIO_E+0x15))
#define GPIO_E_IDR_LOW		((volatile unsigned char *)		(GPIO_E+0x10))	
#define GPIO_E_IDR_HIGH		((volatile unsigned char *)		(GPIO_E+0x11))

/* Masker för kontrollbitar */
#define	B_E			0x40			// ENABLE-SIGNAL
#define	B_SELECT	4				// Välj ASCII-display
#define	B_RW		2				// 0=Write, 1=Read
#define	B_RS		1				// 0=Control, 1=Data
 

void init_app(void){
	* GPIO_E_MODER = 0x55555555;	//E0-7 utgång såväl som E8-15
	* GPIO_E_OTYPER = 0x00000000;
	* GPIO_E_OSPEEDR = 0x00000000;
	// TODO
}
void ascii_init( void ){
	ascii_write_cmd(1);
	ascii_write_cmd(0x38);
	ascii_write_cmd(0x0E);
	ascii_write_cmd(0x04);
	// TODO
}

void ascii_ctrl_bit_set( char x ){
	/* x: bitmask bit are 1 to set */
	char c;
	c = *GPIO_E_ODR_LOW;
	*GPIO_E_ODR_LOW = B_SELECT | x | c;
}

void ascii_ctrl_bit_clear( char x ){
	// x: bitmask bit are 1 to clear
	char c;
	c = *GPIO_E_ODR_LOW;
	c = c & ~x;
	*GPIO_E_ODR_LOW = B_SELECT | c;
}

char ascii_read_controller( void ){
	char c;
	ascii_ctrl_bit_set( B_E );
	delay_250ns();
	delay_250ns();
	c = *GPIO_E_IDR_HIGH;
	ascii_ctrl_bit_clear( B_E );
	return c;
}

char ascii_read_status( void ){
	char c;
	*GPIO_E_MODER = 0x00005555;
	ascii_ctrl_bit_set( B_RW );
	ascii_ctrl_bit_clear( B_RS );
	c = ascii_read_controller();
	
	*GPIO_E_MODER = 0x55555555;
	return c;	
}
void ascii_write_controller( char c ){
	ascii_ctrl_bit_set( B_E );
	* GPIO_E_ODR_HIGH = c;
	ascii_ctrl_bit_clear( B_E );
	delay_250ns();	
}

void ascii_write_cmd( char command ){
	ascii_ctrl_bit_clear( B_RS );	// RS = 0
	ascii_ctrl_bit_clear( B_RW );  	// RW = 0
	ascii_write_controller( command );	
}

void ascii_write_data ( unsigned char data ){
	ascii_ctrl_bit_set( B_RS ); 	// RS = 1	 			
	ascii_ctrl_bit_clear( B_RW );	// RW = 0
	ascii_write_controller( data );	
}

char ascii_read_data( void ){
	char c;
	*GPIO_E_MODER = 0x00005555;
	ascii_ctrl_bit_set( B_RW );  	// RW = 1
	ascii_ctrl_bit_set( B_RS );		// RS = 1
	c = ascii_read_controller();
	*GPIO_E_MODER = 0x55555555;
	return c;
}
	
void delay_250ns(void){
	* STK_CTRL = 0;
	* STK_LOAD = (164/4) - 1;
	* STK_VAL = 0;
	* STK_CTRL = 5;
	while((* STK_CTRL & 0x10000) == 0);
	* STK_CTRL = 0;	
}
void delay_mikro(int us){
	#ifdef SIMULATOR
		us = us/4000;
		us++;
	#endif
		delay_250ns();
		delay_250ns();
		delay_250ns();
		delay_250ns();
}
void delay_mili(int ms){
	#ifdef SIMULATOR
		ms = ms/4000;
		ms++;
	#endif
		delay_mikro(1000);		
}

ascii_write_char( char c ){
	while((ascii_read_status() & 0x80) == 0x80 ){}
	delay_mikro(8);
	ascii_write_data(c);
	delay_mili(2);	
}

void ascii_gotoXY(int row, int col)	{
	/*int row[] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
	int col[] = {1,2}; */
	
	int address = row - 1;
	if ( col == 2 ){
		address = address + 0x40;
	}
	ascii_write_cmd(0x80 | address);
}

void main(int argc, char **argv)
{
	char *s;
	char test1[] = "Alfanumerisk";
	char test2[] = "Display - test";
	
	init_app();
	ascii_init();
	ascii_gotoXY(1,1);
	s = test1;
	while( *s )
	ascii_write_char( *s++ );
	ascii_gotoXY(1,2);
	s = test2;
	while( *s )
	ascii_write_char( *s++ );
	return 0;	
}
