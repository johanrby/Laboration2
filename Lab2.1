/*
 * 	startup.c
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */
}

#define GPIO_D				0x40020C00
#define GPIO_D_MODER		((volatile unsigned int *)		(GPIO_D))
#define GPIO_D_OTYPER		((volatile unsigned short *)	(GPIO_D+0x05))
#define GPIO_D_PUPDR		((volatile unsigned short *) 	(GPIO_D+0x0E))
#define GPIO_D_OSPEEDR		((volatile unsigned int *)		(GPIO_D+0x08))

#define GPIO_D_ODR			((volatile unsigned short *)	(GPIO_D+0x14))
	
#define GPIO_D_ODR_LOW 		((volatile unsigned char *)	 	(GPIO_D+0x14))	
#define GPIO_D_ODR_HIGH 	((volatile unsigned char *)		(GPIO_D+0x15))

#define GPIO_D_IDR_LOW		((volatile unsigned char *)		(GPIO_D+0x10))	
#define GPIO_D_IDR_HIGH		((volatile unsigned char *)		(GPIO_D+0x11))
		




void app_init(void)
{	
	* GPIO_D_MODER = 0x55005555;		
	* GPIO_D_PUPDR = 0x00AA0000;	//INPUT is PULL DOWN
	* GPIO_D_OTYPER = 0x00000000; 	//OUTPUt is PUSH PULL
	* GPIO_D_OSPEEDR = 0x00000000;  // oklart om denna behövs och hur den ska initieras 
}

unsigned char keyb(void)
{
	char key[] = { 1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD}; // tangetbordets olika tangenter
	int row;
	int col;
	
	for(row = 0; row <= 4; row++)
	{
		kbdActivate(row); 
		if(col = kbdGetCol()){
			kbdActivate(0);
			return key[4*(row-1) + (col-1)];
		}
	}
	kbdActivate(0);
	return 0xFF;
}

void kbdActivate(unsigned int row)
{		
	switch(row){
		case 1: *GPIO_D_ODR_HIGH = 0x10; break;
		case 2: *GPIO_D_ODR_HIGH = 0x20; break;
		case 3: *GPIO_D_ODR_HIGH = 0x40; break;
		case 4: *GPIO_D_ODR_HIGH = 0x80; break;
		default: *GPIO_D_ODR_HIGH = 0;
	}	
}

int kbdGetCol(void)
{
	unsigned char c;
	c = *GPIO_D_IDR_HIGH;
	if(c & 8) return 4;
	if(c & 4) return 3;
	if(c & 2) return 2;
	if(c & 1) return 1;
	return 0; 
}

void out7seg(unsigned char c)
{	 
	char segCodes[] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67,0x77,0x7C,0x39,0x5E,0x79,0x71};
	if(c >= 0  && c <= 15 ){	
		* GPIO_D_ODR_LOW = segCodes[c];
	}
	else{	
		* GPIO_D_ODR_LOW = 0;	// släcka display om (16-255), skriv 0 till utport
	}		
}

/* main */
void main(void)
{
	unsigned char c;
	app_init();
	while(1)
	{
		c = keyb();
		out7seg( c );
	}
}
